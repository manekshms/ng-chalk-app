{"version":3,"sources":["/home/maneksh/public_node/work-space/ng-chalk-app/dist/ng-chalk/fesm5/ng-chalk.js","./src/app/app.component.html","./$_lazy_route_resource lazy namespace object","./src/app/app.component.scss","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/ng-chalk-templates/foo-template.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgI;AAC/F;AACc;;AAE/C;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAKV;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAKV;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAKV;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAKV;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,aAAa,+CAA+C;AAC5D,aAAa,iDAAiD;AAC9D,aAAa,2CAA2C;AACxD,aAAa,iDAAiD;AAC9D;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA,iBAAiB;AACjB;AACA,8DAA8D,wEAAkB,EAAE,mDAAmD,mCAAmC,EAAE,mDAAmD;AAC7N;AACA,CAAC;AACD,WAAW,EAKV;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,6BAA6B,8BAA8B,EAAE;AAC7D;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA,iBAAiB;AACjB;AACA;AACA,iDAAiD;AACjD,SAAS;AACT,MAAM;AACN,wDAAwD,wEAAkB,EAAE,6CAA6C,2BAA2B,8DAAQ,wBAAwB,EAAE,6CAA6C;AACnO;AACA,CAAC;AACD,WAAW,EAMV;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,mDAAmD;AACnD,SAAS;AACT,MAAM;AACN;AACA,iBAAiB,OAAO,mDAAK,oBAAoB;AACjD,kBAAkB,OAAO,mDAAK,wBAAwB;AACtD,wBAAwB,OAAO,mDAAK,2BAA2B;AAC/D,cAAc,OAAO,mDAAK,iBAAiB;AAC3C,wBAAwB,OAAO,mDAAK,uBAAuB;AAC3D,mBAAmB,OAAO,mDAAK,sBAAsB;AACrD,qBAAqB,OAAO,uDAAS,8BAA8B;AACnE;AACA;AACA,CAAC;AACD,WAAW,EAyBV;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA,8BAA8B,4DAAY;AAC1C;AACA;AACA,iBAAiB;AACjB;AACA;AACA,CAAC;AACD,WAAW,EAAE;AACb,kCAAkC,4DAAc;AAChD;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,yCAAyC,sDAAQ;AACjD;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,WAAW,EAKV;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,WAAW,EAWV;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA,kCAAkC;AAClC,WAAW,EAKV;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAE4I;AAC5I;;;;;;;;;;;;ACjYA,g+C;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;ACZA,+BAA+B,uBAAuB,GAAG,qBAAqB,qBAAqB,sBAAsB,GAAG,wBAAwB,kBAAkB,2BAA2B,wBAAwB,GAAG,6CAA6C,+jC;;;;;;;;;;;;;;;;;ACA/N;AAO1C;IALA;QAME,UAAK,GAAG,kBAAkB,CAAC;IAC7B,CAAC;IAFY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,2IAAmC;;SAEpC,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;ACPiC;AACjB;AAEA;AACM;AACiB;AAahE;IAAA;IAAyB,CAAC;IAAb,SAAS;QAXrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,sDAAa,CAAC,OAAO,CAAC,EAAC,SAAS,EAAE,CAAC,EAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,4EAAW,EAAE,EAAC,CAAC,EAAE,cAAc,EAAE,KAAK,EAAC,CAAC;aACxG;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;AChBtB;AAAA;AAAA;IAAA;QACI,UAAK,GAAU,MAAM;QACrB,OAAE,GAAU,SAAS,CAAC;IAC1B,CAAC;IAAD,kBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACLD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main-es5.js","sourcesContent":["import { Injectable, ɵɵdefineInjectable, ɵɵinject, Component, Input, ViewChild, NgModule, InjectionToken } from '@angular/core';\nimport { __spread } from 'tslib';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar DangerTemplate = /** @class */ (function () {\n    function DangerTemplate() {\n        this.color = \"#cf0a11\";\n        this.bg = \"#fdd9d9\";\n    }\n    return DangerTemplate;\n}());\nif (false) {\n    /** @type {?} */\n    DangerTemplate.prototype.color;\n    /** @type {?} */\n    DangerTemplate.prototype.bg;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar WarningTemplate = /** @class */ (function () {\n    function WarningTemplate() {\n        this.color = \"#7f7a05\";\n        this.bg = \"#fffdd9\";\n    }\n    return WarningTemplate;\n}());\nif (false) {\n    /** @type {?} */\n    WarningTemplate.prototype.color;\n    /** @type {?} */\n    WarningTemplate.prototype.bg;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar InfoTemplate = /** @class */ (function () {\n    function InfoTemplate() {\n        this.color = \"#094182\";\n        this.bg = \"#d9f5ff\";\n    }\n    return InfoTemplate;\n}());\nif (false) {\n    /** @type {?} */\n    InfoTemplate.prototype.color;\n    /** @type {?} */\n    InfoTemplate.prototype.bg;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar SuccessTemplate = /** @class */ (function () {\n    function SuccessTemplate() {\n        this.color = \"#369628\";\n        this.bg = \"#e0ffd8\";\n    }\n    return SuccessTemplate;\n}());\nif (false) {\n    /** @type {?} */\n    SuccessTemplate.prototype.color;\n    /** @type {?} */\n    SuccessTemplate.prototype.bg;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar NgChalkServiceConfig = /** @class */ (function () {\n    function NgChalkServiceConfig() {\n        this.defaultPadding = '2px';\n        this.templates = [\n            { name: 'danger', template: new DangerTemplate },\n            { name: 'warning', template: new WarningTemplate },\n            { name: 'info', template: new InfoTemplate },\n            { name: 'success', template: new SuccessTemplate },\n        ];\n    }\n    NgChalkServiceConfig.decorators = [\n        { type: Injectable, args: [{\n                    providedIn: \"root\"\n                },] }\n    ];\n    /** @nocollapse */ NgChalkServiceConfig.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgChalkServiceConfig_Factory() { return new NgChalkServiceConfig(); }, token: NgChalkServiceConfig, providedIn: \"root\" });\n    return NgChalkServiceConfig;\n}());\nif (false) {\n    /** @type {?} */\n    NgChalkServiceConfig.prototype.defaultPadding;\n    /** @type {?} */\n    NgChalkServiceConfig.prototype.templates;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar NgChalkService = /** @class */ (function () {\n    function NgChalkService(config) {\n        this.config = config;\n    }\n    /**\n     * @return {?}\n     */\n    NgChalkService.prototype.getConfig = /**\n     * @return {?}\n     */\n    function () {\n        return this.config;\n    };\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    NgChalkService.prototype.setConfig = /**\n     * @param {?} config\n     * @return {?}\n     */\n    function (config) {\n        this.config = config;\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    NgChalkService.prototype.getTemplateByName = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        /** @type {?} */\n        var ngChalkTemplateConfig = this.config.templates.find((/**\n         * @param {?} template\n         * @return {?}\n         */\n        function (template) { return template.name == name; }));\n        return ngChalkTemplateConfig ? ngChalkTemplateConfig.template : null;\n    };\n    /**\n     * @return {?}\n     */\n    NgChalkService.prototype.getDefaultPadding = /**\n     * @return {?}\n     */\n    function () {\n        return this.config.defaultPadding;\n    };\n    NgChalkService.decorators = [\n        { type: Injectable, args: [{\n                    providedIn: 'root'\n                },] }\n    ];\n    /** @nocollapse */\n    NgChalkService.ctorParameters = function () { return [\n        { type: NgChalkServiceConfig }\n    ]; };\n    /** @nocollapse */ NgChalkService.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgChalkService_Factory() { return new NgChalkService(ɵɵinject(NgChalkServiceConfig)); }, token: NgChalkService, providedIn: \"root\" });\n    return NgChalkService;\n}());\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    NgChalkService.prototype.config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar NgChalkComponent = /** @class */ (function () {\n    function NgChalkComponent(ngChalkService) {\n        this.ngChalkService = ngChalkService;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    NgChalkComponent.prototype.initialize = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        this.template = this.ngChalkService.getTemplateByName(this.templateName);\n        this.color = this.color || (this.template && this.template.color ? this.template.color : \"\");\n        this.bg = this.bg || (this.template && this.template.bg ? this.template.bg : \"\");\n        this.border = this.border || (this.template && this.template.borderVal ? this.template.borderVal : \"\");\n        this.borderRadius = this.borderRadius || (this.template && this.template.borderRadius ? this.template.borderRadius : \"\");\n        this.padding = this.padding || (this.template && this.template.padding ? this.template.padding : \"\");\n    };\n    /**\n     * @return {?}\n     */\n    NgChalkComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this.initialize();\n        this.container.nativeElement.style.color = this.color;\n        this.container.nativeElement.style.border = this.border;\n        this.container.nativeElement.style.borderRadius = this.borderRadius;\n        this.container.nativeElement.style.background = this.bg;\n        this.container.nativeElement.style.padding = this.padding || this.ngChalkService.getDefaultPadding();\n    };\n    NgChalkComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'ng-chalk',\n                    template: \"<span #container >\\n    <ng-content></ng-content>\\n</span>\",\n                    styles: [\"\"]\n                }] }\n    ];\n    /** @nocollapse */\n    NgChalkComponent.ctorParameters = function () { return [\n        { type: NgChalkService }\n    ]; };\n    NgChalkComponent.propDecorators = {\n        color: [{ type: Input, args: ['color',] }],\n        border: [{ type: Input, args: ['borderVal',] }],\n        borderRadius: [{ type: Input, args: ['borderRadius',] }],\n        bg: [{ type: Input, args: ['bg',] }],\n        templateName: [{ type: Input, args: [\"template\",] }],\n        padding: [{ type: Input, args: [\"padding\",] }],\n        container: [{ type: ViewChild, args: [\"container\", null,] }]\n    };\n    return NgChalkComponent;\n}());\nif (false) {\n    /** @type {?} */\n    NgChalkComponent.prototype.color;\n    /** @type {?} */\n    NgChalkComponent.prototype.border;\n    /** @type {?} */\n    NgChalkComponent.prototype.borderRadius;\n    /** @type {?} */\n    NgChalkComponent.prototype.bg;\n    /** @type {?} */\n    NgChalkComponent.prototype.templateName;\n    /** @type {?} */\n    NgChalkComponent.prototype.padding;\n    /** @type {?} */\n    NgChalkComponent.prototype.container;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgChalkComponent.prototype.template;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgChalkComponent.prototype.ngChalkService;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar NgChalkModule = /** @class */ (function () {\n    function NgChalkModule() {\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    NgChalkModule.forRoot = /**\n     * @param {?} config\n     * @return {?}\n     */\n    function (config) {\n        return {\n            ngModule: NgChalkModule,\n            providers: [\n                {\n                    provide: NG_CHALK_SERVICE_CONFIG,\n                    useValue: config\n                },\n                {\n                    provide: NgChalkServiceConfig,\n                    useFactory: createNgChalkServiceConfig,\n                    deps: [NG_CHALK_SERVICE_CONFIG]\n                }\n            ]\n        };\n    };\n    NgChalkModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [NgChalkComponent],\n                    imports: [CommonModule],\n                    exports: [NgChalkComponent],\n                    providers: [NgChalkServiceConfig]\n                },] }\n    ];\n    return NgChalkModule;\n}());\n/** @type {?} */\nvar NG_CHALK_SERVICE_CONFIG = new InjectionToken('config');\n/**\n * @param {?=} config\n * @return {?}\n */\nfunction createNgChalkServiceConfig(config) {\n    /** @type {?} */\n    var ngChalkServiceConfig = new NgChalkServiceConfig();\n    if (config) {\n        ngChalkServiceConfig.defaultPadding = config.defaultPadding || ngChalkServiceConfig.defaultPadding;\n        ngChalkServiceConfig.templates = __spread(ngChalkServiceConfig.templates, (config.templates || ngChalkServiceConfig.templates));\n    }\n    return ngChalkServiceConfig;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction NgChalkConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    NgChalkConfig.prototype.defaultPadding;\n    /** @type {?|undefined} */\n    NgChalkConfig.prototype.templates;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction NgChalkTemplate() { }\nif (false) {\n    /** @type {?|undefined} */\n    NgChalkTemplate.prototype.color;\n    /** @type {?|undefined} */\n    NgChalkTemplate.prototype.bg;\n    /** @type {?|undefined} */\n    NgChalkTemplate.prototype.padding;\n    /** @type {?|undefined} */\n    NgChalkTemplate.prototype.borderVal;\n    /** @type {?|undefined} */\n    NgChalkTemplate.prototype.borderRadius;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction NgChalkTemplateConfig() { }\nif (false) {\n    /** @type {?} */\n    NgChalkTemplateConfig.prototype.name;\n    /** @type {?} */\n    NgChalkTemplateConfig.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NG_CHALK_SERVICE_CONFIG, NgChalkComponent, NgChalkModule, NgChalkService, createNgChalkServiceConfig, NgChalkServiceConfig as ɵa };\n//# sourceMappingURL=ng-chalk.js.map\n","module.exports = \"<div class=\\\"page-container\\\">\\n    <h2 class=\\\"page-title\\\">Examples</h2>\\n    <section class=\\\"example-container\\\">\\n        <h3>Only text color</h3>\\n        <ng-chalk color=\\\"orangered\\\" >Hai there</ng-chalk>\\n    </section>\\n    <section class=\\\"example-container\\\">\\n        <h3>Text color and background</h3>\\n        <ng-chalk color=\\\"Crimson \\\"  bg=\\\"Cornsilk \\\">Hai there</ng-chalk>\\n    </section>\\n    <section class=\\\"example-container\\\">\\n        <h3>Text color, background and border</h3>\\n        <ng-chalk color=\\\"white\\\"  borderVal=\\\"2px solid DarkBlue \\\" bg=\\\"CornflowerBlue\\\">Hai there</ng-chalk>\\n    </section>\\n    <h2>Examples with template</h2>\\n    <section class=\\\"example-container\\\">\\n        <h3>Danger template</h3>\\n        <ng-chalk template=\\\"danger\\\" >Hai there</ng-chalk>\\n    </section>\\n    <section class=\\\"example-container\\\">\\n        <h3>Info template</h3>\\n        <ng-chalk template=\\\"info\\\" >Hai there</ng-chalk>\\n    </section>\\n    <section class=\\\"example-container\\\">\\n        <h3>Warning template</h3>\\n        <ng-chalk template=\\\"warning\\\" >Hai there</ng-chalk>\\n    </section>\\n    <section class=\\\"example-container\\\">\\n        <h3>Success template</h3>\\n        <ng-chalk template=\\\"success\\\" >Hai there</ng-chalk>\\n    </section>\\n    <h2>Custom Template with name foo</h2>\\n    <section class=\\\"example-container\\\">\\n        <h3>Foo template</h3>\\n        <ng-chalk template=\\\"foo\\\" >Hai there</ng-chalk>\\n    </section>\\n</div>\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \".page-title {\\n  text-align: center;\\n}\\n\\n.page-container {\\n  max-width: 850px;\\n  margin: 20px auto;\\n}\\n\\n.example-container {\\n  padding: 20px;\\n  border: 1px solid #ddd;\\n  margin-bottom: 20px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL21hbmVrc2gvcHVibGljX25vZGUvd29yay1zcGFjZS9uZy1jaGFsay1hcHAvcHJvamVjdHMvbmctY2hhbGstZXhhbXBsZS9zcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyIsInByb2plY3RzL25nLWNoYWxrLWV4YW1wbGUvc3JjL2FwcC9hcHAuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxrQkFBQTtBQ0NKOztBREVBO0VBQ0ksZ0JBQUE7RUFDQSxpQkFBQTtBQ0NKOztBRENBO0VBQ0ksYUFBQTtFQUNBLHNCQUFBO0VBQ0EsbUJBQUE7QUNFSiIsImZpbGUiOiJwcm9qZWN0cy9uZy1jaGFsay1leGFtcGxlL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnBhZ2UtdGl0bGUge1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLnBhZ2UtY29udGFpbmVyIHtcbiAgICBtYXgtd2lkdGg6IDg1MHB4O1xuICAgIG1hcmdpbjogMjBweCBhdXRvO1xufVxuLmV4YW1wbGUtY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiAyMHB4O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbn0iLCIucGFnZS10aXRsZSB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLnBhZ2UtY29udGFpbmVyIHtcbiAgbWF4LXdpZHRoOiA4NTBweDtcbiAgbWFyZ2luOiAyMHB4IGF1dG87XG59XG5cbi5leGFtcGxlLWNvbnRhaW5lciB7XG4gIHBhZGRpbmc6IDIwcHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG59Il19 */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'ng-chalk-example';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { NgChalkModule } from 'ng-chalk';\nimport { AppComponent } from './app.component';\nimport { FooTemplate } from './ng-chalk-templates/foo-template';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    NgChalkModule.forRoot({templates: [{name: 'foo', template: new FooTemplate()}], defaultPadding: '2px'})\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgChalkTemplate } from 'ng-chalk';\n\nexport class FooTemplate {\n    color:String = \"#fff\"\n    bg:String = \"#1366ff\";\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}